import numpy as np


def prod_non_zero_diag(x):
    x = np.diagonal(x)
    x = x[x != 0]
    x = np.multiply.reduce(x)
    return x


def are_multisets_equal(x, y):
    x = np.sort(x)
    y = np.sort(y)

    if (np.array_equal(x, y)):
        return True
    else:
        return False


def max_after_zero(x):
    zero_vector = (x == 0)
    max_vector = x[1:][zero_vector[:-1]]
    return max_vector.max()

    # http://www.cyberforum.ru/python/thread1659360.html


def run_length_encoding(x):
    diffs = np.ones_like(x)
    diffs[1:] = x[1:] - x[:-1]
    idx = diffs.nonzero()[0]
    nums = np.roll(idx, -1) - idx
    nums[-1] = x.shape[0] - idx[-1]
    a = np.array(x[idx])
    b = np.array(nums)
    return (a, b)

# https://stackoverflow.com/questions/15637336/numpy-unique-with-order-preserved


def convert_image(img, coefs):
    result = np.zeros((img.shape[0], img.shape[1]), dtype=np.float)
    for i in range(img.shape[2]):
        result += np.multiply(img[:, :, i], coefs[i])
    return result


def pairwise_distance(x, y):
    from math import sqrt
    D = np.zeros((x.shape[0], y.shape[0]), dtype=np.float)

    for i in range(x.shape[0]):
        s = 0.0
        for j in range(y.shape[0]):
            s = (x[i] - y[j]) ** 2
            s = np.sum(s)
            s = sqrt(s)
            D[i][j] = s
    return D
